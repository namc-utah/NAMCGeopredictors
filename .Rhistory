## Load useful packages
library(sf)
library(raster)
library(data.table)
#setwd("/Users/alexhernandez/Desktop/BUG_BLM/ZonalTest")
library(here)
library(ggpubr)
library(mapview)
library(prism)
library(exactextractr)
library(mapedit)
library(reticulate)
library(rgee)
library(tidyverse)
library(survival)
library(dplyr)
library(nhdplusTools)
library(lubridate)
library(units)
ee_Initialize()
library(geojsonio)
??geojson_write
setwd("/Volumes/IntelSSD/BUG_BLM/ZonalTest")
here()
arem.kmz<-st_read("Desktop/BUG_BLM/ZonalTestVectors/CAL_ws_4June2014.kml")
arem.kmz<-st_read("Desktop/BUG_BLM/ZonalTest/Vectors/CAL_ws_4June2014.kml")
arem.kmz<-st_read("/Desktop/BUG_BLM/ZonalTest/Vectors/CAL_ws_4June2014.kml")
arem.kmz<-st_read("/Users/alexhernandez/Desktop/BUG_BLM/ZonalTest/Vectors/CAL_ws_4June2014.kml")
## Define the projection to work throughout the project
# Load the HUCs - this shapefile is a good place to start for projection references
HUCs<- st_read(here("Vectors","HUC4_All.shp"))
## And now extract its crs
crs2use<-crs(HUCs)
HUCs<- st_read("/Users/alexhernandez/Desktop/BUG_BLM//Vectors/HUC4_All.shp"))
HUCs<- st_read("/Users/alexhernandez/Desktop/BUG_BLM//Vectors/HUC4_All.shp")
HUCs<- st_read("/Users/alexhernandez/Desktop/BUG_BLM/Vectors/HUC4_All.shp")
HUCs<- st_read("/Users/alexhernandez/Desktop/BUG_BLM/ZonalTest/Vectors/HUC4_All.shp")
## And now extract its crs
crs2use<-crs(HUCs)
arem.kmz<-st_transform(arem.kmz, crs2use)
arem.kmz.valid<-st_make_valid(arem.kmz)
mapview(arem.kmz.valid)
View(arem.kmz.valid)
arem.kmz.valid<-arem.kmz.valid[,1]
mapview(arem.kmz.valid)
View(arem.kmz.valid)
geojson_write(arem.kmz.valid, file = "/Users/alexhernandez/Desktop/NAMC_Borrar/aremptest.geojson")
arem.kmz.valid.json<-geojson_json(arem.kmz.valid)
arem.kmz.valid.json.simp<-ms_simplify(arem.kmz.valid.json)
library(mapshaper)
library(rmapshaper)
install.packages("rmapshaper")
library(rmapshaper)
arem.kmz.valid.json.simp<-ms_simplify(arem.kmz.valid.json)
geojson_write(arem.kmz.valid.json.simp, file = "/Users/alexhernandez/Desktop/NAMC_Borrar/aremptestsimp.geojson")
polygon2process<-geojson_read("/Users/alexhernandez/Desktop/NAMC_Borrar/aremptestsimp.geojson", ,  what = "sp")
mapview(polygon2process)
polygon2process<-st_read("/Users/alexhernandez/Desktop/NAMC_Borrar/aremptestsimp.geojson")
mapview(polygon2process)
View(polygon2process)
mapview(arem.kmz.valid)
View(arem.kmz.valid)
polygon2process2<-st_read("/Users/alexhernandez/Desktop/NAMC_Borrar/aremptest.geojson")
??geojson_write
geojson_write(arem.kmz.valid.json.simp, file = "/Users/alexhernandez/Desktop/NAMC_Borrar/aremptestsimp.geojson",crs=crs2use)
polygon2process<-st_read("/Users/alexhernandez/Desktop/NAMC_Borrar/aremptestsimp.geojson")
geojson_write(arem.kmz.valid.json.simp, file = "/Users/alexhernandez/Desktop/NAMC_Borrar/aremptestsimp.geojson",convert_wgs84=FALSE)
geojson_write(arem.kmz.valid.json.simp, file = "/Users/alexhernandez/Desktop/NAMC_Borrar/aremptestsimp.geojson",convert_wgs84=TRUE)
arem.kmz.valid.json.simp
arem.kmz.valid2<- geojson_sf(arem.kmz.valid.json.simp)
arem.kmz.valid2
??geojson_json
arem.kmz.valid.json<-geojson_json(arem.kmz.valid, crs = crs2use)
arem.kmz.valid.json.simp<-ms_simplify(arem.kmz.valid.json)
arem.kmz.valid2<- geojson_sf(arem.kmz.valid.json.simp)
arem.kmz.valid2
arem.kmz.valid2<-st_transform(arem.kmz.valid, crs = EPSG: 4326)
arem.kmz.valid2<-st_transform(arem.kmz.valid, crs = 4326)
arem.kmz.valid.json<-geojson_json(arem.kmz.valid2)
arem.kmz.valid.json.simp<-ms_simplify(arem.kmz.valid.json)
arem.kmz.valid3<- geojson_sf(arem.kmz.valid.json.simp)
arem.kmz.valid3
geojson_write(arem.kmz.valid.json.simp, file = "/Users/alexhernandez/Desktop/NAMC_Borrar/aremtestsimplified.geojson")
polygon2process<-st_read("/Users/alexhernandez/Desktop/NAMC_Borrar/aremtestsimplified.geojson")
mapview(polygon2process)
###### Define predictors
USGS_NED<-ee$Image("USGS/NED")$select("elevation")
ELVmean_WS<-function(polygon2process){
validgeometry<-st_make_valid(polygon2process)
validgeometry$ELVmean_WS<-NA
#ptm <- proc.time()
for (i in 1:nrow(validgeometry)){
tryCatch({ #if an error is found then it is printed, but the loop does not break and continues with the next iteration
objecto<-validgeometry[i,] # Take the first feature
elmean<-ee_extract(USGS_NED, objecto, fun = ee$Reducer$mean(), scale=30)%>% as_tibble()
validgeometry[[3]][i]<-elmean
},error=function(e){cat("ERROR :",conditionMessage(e), "\n")})
}
#proc.time() - ptm
validgeometry$ELVmean_WS<-unlist(validgeometry$ELVmean_WS)
return(validgeometry$ELVmean_WS)
}
chorin<-ELVmean_WS(polygon2process)
ELVmean_WS<-function(polygon2process){
validgeometry<-st_make_valid(polygon2process)
validgeometry$ELVmean_WS<-NA
#ptm <- proc.time()
for (i in 1:nrow(validgeometry)){
tryCatch({ #if an error is found then it is printed, but the loop does not break and continues with the next iteration
objecto<-validgeometry[i,] # Take the first feature
elmean<-ee_extract(USGS_NED, objecto, fun = ee$Reducer$mean(), scale=30)%>% as_tibble()
#validgeometry[[4]][i]<-elmean
},error=function(e){cat("ERROR :",conditionMessage(e), "\n")})
}
#proc.time() - ptm
#validgeometry$ELVmean_WS<-unlist(validgeometry$ELVmean_WS)
media<-pull(elmean)
return(media)
}
ELVmean_WS(polygon2process)
ELVmean_WS<-function(polygon2process){
validgeometry<-st_make_valid(polygon2process)
validgeometry$ELVmean_WS<-NA
#ptm <- proc.time()
for (i in 1:10){
tryCatch({ #if an error is found then it is printed, but the loop does not break and continues with the next iteration
objecto<-validgeometry[i,] # Take the first feature
elmean<-ee_extract(USGS_NED, objecto, fun = ee$Reducer$mean(), scale=30)%>% as_tibble()
#validgeometry[[4]][i]<-elmean
},error=function(e){cat("ERROR :",conditionMessage(e), "\n")})
}
#proc.time() - ptm
#validgeometry$ELVmean_WS<-unlist(validgeometry$ELVmean_WS)
media<-pull(elmean)
return(media)
}
pechereco<-ELVmean_WS(polygon2process)
ELVmean_WS<-function(polygon2process){
validgeometry<-st_make_valid(polygon2process)
validgeometry$ELVmean_WS<-NA
#ptm <- proc.time()
for (i in 1:10){
tryCatch({ #if an error is found then it is printed, but the loop does not break and continues with the next iteration
objecto<-validgeometry[i,] # Take the first feature
elmean<-ee_extract(USGS_NED, objecto, fun = ee$Reducer$mean(), scale=30)%>% as_tibble()
validgeometry[[4]][i]<-elmean
},error=function(e){cat("ERROR :",conditionMessage(e), "\n")})
}
#proc.time() - ptm
validgeometry$ELVmean_WS<-unlist(validgeometry$ELVmean_WS)
media<-validgeometry$ELVmean_WS
return(media)
}
pechereco<-ELVmean_WS(polygon2process)
pechereco
class(pechereco)
ELVmean_WS<-function(polygon2process){
validgeometry<-st_make_valid(polygon2process)
validgeometry$ELVmean_WS<-NA
#ptm <- proc.time()
for (i in 1:10){
tryCatch({ #if an error is found then it is printed, but the loop does not break and continues with the next iteration
objecto<-validgeometry[i,] # Take the first feature
elmean<-ee_extract(USGS_NED, objecto, fun = ee$Reducer$mean(), scale=30)%>% as_tibble()
validgeometry[[4]][i]<-elmean
},error=function(e){cat("ERROR :",conditionMessage(e), "\n")})
}
#proc.time() - ptm
validgeometry$ELVmean_WS<-unlist(validgeometry$ELVmean_WS)
media<-as.vector(validgeometry$ELVmean_WS)
return(media)
}
pechereco<-ELVmean_WS(polygon2process)
pechereco
putin<-polygon2process
ELVmean_WS<-function(polygon2process){
validgeometry<-st_make_valid(polygon2process)
validgeometry$ELVmean_WS<-NA
#ptm <- proc.time()
for (i in 1:10){
tryCatch({ #if an error is found then it is printed, but the loop does not break and continues with the next iteration
objecto<-validgeometry[i,] # Take the first feature
elmean<-ee_extract(USGS_NED, objecto, fun = ee$Reducer$mean(), scale=30)%>% as_tibble()
validgeometry[[4]][i]<-elmean
},error=function(e){cat("ERROR :",conditionMessage(e), "\n")})
}
#proc.time() - ptm
validgeometry$ELVmean_WS<-unlist(validgeometry$ELVmean_WS)
media<-as.data.frame(validgeometry$ELVmean_WS)
return(media)
}
pechereco<-ELVmean_WS(putin)
View(pechereco)
ELVmean_WS<-function(polygon2process){
validgeometry<-st_make_valid(polygon2process)
validgeometry$ELVmean_WS<-NA
#ptm <- proc.time()
for (i in 1:10){
tryCatch({ #if an error is found then it is printed, but the loop does not break and continues with the next iteration
objecto<-validgeometry[i,] # Take the first feature
elmean<-ee_extract(USGS_NED, objecto, fun = ee$Reducer$mean(), scale=30)%>% as_tibble()
validgeometry[[4]][i]<-elmean
},error=function(e){cat("ERROR :",conditionMessage(e), "\n")})
}
#proc.time() - ptm
validgeometry$ELVmean_WS<-unlist(validgeometry$ELVmean_WS)
media<-as.data.frame(validgeometry$ELVmean_WS)
colnames(media)<-ELVmean_WS
return(media)
}
pechereco<-ELVmean_WS(putin)
ELVmean_WS<-function(polygon2process){
validgeometry<-st_make_valid(polygon2process)
validgeometry$ELVmean_WS<-NA
#ptm <- proc.time()
for (i in 1:10){
tryCatch({ #if an error is found then it is printed, but the loop does not break and continues with the next iteration
objecto<-validgeometry[i,] # Take the first feature
elmean<-ee_extract(USGS_NED, objecto, fun = ee$Reducer$mean(), scale=30)%>% as_tibble()
validgeometry[[4]][i]<-elmean
},error=function(e){cat("ERROR :",conditionMessage(e), "\n")})
}
#proc.time() - ptm
validgeometry$ELVmean_WS<-unlist(validgeometry$ELVmean_WS)
media<-as.data.frame(validgeometry$ELVmean_WS)
colnames(media)<-"ELVmean_WS"
return(media)
}
pechereco<-ELVmean_WS(putin)
View(pechereco)
HUCs<- st_read("/Users/alexhernandez/Desktop/BUG_BLM/ZonalTest/Vectors","HUC4_All.shp"))
HUCs<- st_read("/Users/alexhernandez/Desktop/BUG_BLM/ZonalTest/Vectors","HUC4_All.shp")
HUCs<- st_read("/Users/alexhernandez/Desktop/BUG_BLM/ZonalTest/Vectors/HUC4_All.shp")
## And now extract its crs
crs2use<-crs(HUCs)
arem.kmz<-st_read("/Users/alexhernandez/Desktop/BUG_BLM/ZonalTest/Vectors/CAL_ws_4June2014.kml")
arem.kmz<-st_transform(arem.kmz, crs2use)
arem.kmz.valid<-st_make_valid(arem.kmz)
arem.kmz.valid2<-st_transform(arem.kmz.valid, crs = 4326)
arem.kmz.valid.json<-geojson_json(arem.kmz.valid2)
arem.kmz.valid.json.simp<-ms_simplify(arem.kmz.valid.json)
arem.kmz.valid3<- geojson_sf(arem.kmz.valid.json.simp)
geojson_write(arem.kmz.valid.json.simp, file = "/Users/alexhernandez/Desktop/NAMC_Borrar/aremtestsimplified.geojson")
putin<-st_read("/Users/alexhernandez/Desktop/NAMC_Borrar/aremtestsimplified.geojson")
mapview(putin)
###### Define predictors
USGS_NED<-ee$Image("USGS/NED")$select("elevation")
ELVmean_WS<-function(polygon2process){
validgeometry<-st_make_valid(polygon2process)
validgeometry$ELVmean_WS<-NA
#ptm <- proc.time()
for (i in 1:10){
tryCatch({ #if an error is found then it is printed, but the loop does not break and continues with the next iteration
objecto<-validgeometry[i,] # Take the first feature
elmean<-ee_extract(USGS_NED, objecto, fun = ee$Reducer$mean(), scale=30)%>% as_tibble()
validgeometry[[4]][i]<-elmean
},error=function(e){cat("ERROR :",conditionMessage(e), "\n")})
}
#proc.time() - ptm
validgeometry$ELVmean_WS<-unlist(validgeometry$ELVmean_WS)
media<-as.data.frame(validgeometry$ELVmean_WS)
colnames(media)<-"ELVmean_WS"
return(media)
}
pechereco<-ELVmean_WS(putin)
View(putin)
HUCs<- st_read("/Users/alexhernandez/Desktop/BUG_BLM/ZonalTest/Vectors/HUC4_All.shp")
## And now extract its crs
crs2use<-crs(HUCs)
arem.kmz<-st_read("/Users/alexhernandez/Desktop/BUG_BLM/ZonalTest/Vectors/CAL_ws_4June2014.kml")
arem.kmz<-st_transform(arem.kmz, crs2use)
View(arem.kmz)
arem.kmz<-arem.kmz[,1]
arem.kmz.valid<-st_make_valid(arem.kmz)
arem.kmz.valid2<-st_transform(arem.kmz.valid, crs = 4326)
arem.kmz.valid.json<-geojson_json(arem.kmz.valid2)
arem.kmz.valid.json.simp<-ms_simplify(arem.kmz.valid.json)
arem.kmz.valid3<- geojson_sf(arem.kmz.valid.json.simp)
geojson_write(arem.kmz.valid.json.simp, file = "/Users/alexhernandez/Desktop/NAMC_Borrar/aremtestsimplified.geojson")
putin<-st_read("/Users/alexhernandez/Desktop/NAMC_Borrar/aremtestsimplified.geojson")
View(putin)
###### Define predictors
USGS_NED<-ee$Image("USGS/NED")$select("elevation")
ELVmean_WS<-function(polygon2process){
validgeometry<-st_make_valid(polygon2process)
validgeometry$ELVmean_WS<-NA
#ptm <- proc.time()
for (i in 1:10){
tryCatch({ #if an error is found then it is printed, but the loop does not break and continues with the next iteration
objecto<-validgeometry[i,] # Take the first feature
elmean<-ee_extract(USGS_NED, objecto, fun = ee$Reducer$mean(), scale=30)%>% as_tibble()
validgeometry[[4]][i]<-elmean
},error=function(e){cat("ERROR :",conditionMessage(e), "\n")})
}
#proc.time() - ptm
validgeometry$ELVmean_WS<-unlist(validgeometry$ELVmean_WS)
media<-as.data.frame(validgeometry$ELVmean_WS)
colnames(media)<-"ELVmean_WS"
return(media)
}
pechereco<-ELVmean_WS(putin)
View(pechereco)
ELVmean_WS<-function(polygon2process){
validgeometry<-st_make_valid(polygon2process)
validgeometry$ELVmean_WS<-NA
ptm <- proc.time()
for (i in 1:nrow(validgeometry)){
tryCatch({ #if an error is found then it is printed, but the loop does not break and continues with the next iteration
objecto<-validgeometry[i,] # Take the first feature
elmean<-ee_extract(USGS_NED, objecto, fun = ee$Reducer$mean(), scale=30)%>% as_tibble()
validgeometry[[4]][i]<-elmean
},error=function(e){cat("ERROR :",conditionMessage(e), "\n")})
}
proc.time() - ptm
validgeometry$ELVmean_WS<-unlist(validgeometry$ELVmean_WS)
media<-as.data.frame(validgeometry$ELVmean_WS)
colnames(media)<-"ELVmean_WS"
return(media)
}
pechereco<-ELVmean_WS(putin)
ELVmin_WS<-function(polygon2process){
validgeometry<-st_make_valid(polygon2process)
validgeometry$ELVmean_WS<-NA
ptm <- proc.time()
for (i in 1:nrow(validgeometry)){
tryCatch({ #if an error is found then it is printed, but the loop does not break and continues with the next iteration
objecto<-validgeometry[i,] # Take the first feature
elmean<-ee_extract(USGS_NED, objecto, fun = ee$Reducer$min(), scale=30)%>% as_tibble()
validgeometry[[4]][i]<-elmean
},error=function(e){cat("ERROR :",conditionMessage(e), "\n")})
}
proc.time() - ptm
validgeometry$ELVmean_WS<-unlist(validgeometry$ELVmean_WS)
media<-as.data.frame(validgeometry$ELVmean_WS)
colnames(media)<-"ELVmin_WS"
return(media)
}
here()
KFACT.ras<-raster("/Users/alexhernandez/Desktop/BUG_BLM/GIS_Stats01/Soils/Data/kfact_usgs","w001001.adf")
KFACT.ras<-raster("/Users/alexhernandez/Desktop/BUG_BLM/ZonalTest/GIS_Stats01/Soils/Data/kfact_usgs","w001001.adf")
KFACT.ras<-raster("/Users/alexhernandez/Desktop/BUG_BLM/ZonalTest/GIS_Stats01/Soils/Data/kfact_usgs/w001001.adf")
KFACT<-function(polygon2process){
validgeometry<-st_make_valid(polygon2process)
validgeometry$KFACT<-exact_extract(KFACT.ras,Ref.elmean,'mean')
media<-as.data.frame(validgeometry$KFACT)
colnames(media)<-"KFACT"
return(media)
}
AREM_model<-function(polygon2process){
inputpolys<-polygon2process
ELVmean_WSS<-ELVmean_WS(inputpolys)
ELVmin_WSS<-ELVmin_WS(inputpolys)
KFACTS<-KFACT(inputpolys)
df2render<-cbind(ELVmean_WSS,ELVmin_WSS,KFACTS)
return(df2render)
}
AREMtest<-AREM_model(putin)
KFACT<-function(polygon2process){
validgeometry<-st_make_valid(polygon2process)
validgeometry$KFACT<-exact_extract(KFACT.ras,validgeometry,'mean')
media<-as.data.frame(validgeometry$KFACT)
colnames(media)<-"KFACT"
return(media)
}
ELVmean_WS<-function(polygon2process){
validgeometry<-st_make_valid(polygon2process)
validgeometry$ELVmean_WS<-NA
ptm <- proc.time()
for (i in 1:10){
tryCatch({ #if an error is found then it is printed, but the loop does not break and continues with the next iteration
objecto<-validgeometry[i,] # Take the first feature
elmean<-ee_extract(USGS_NED, objecto, fun = ee$Reducer$mean(), scale=30)%>% as_tibble()
validgeometry[[4]][i]<-elmean
},error=function(e){cat("ERROR :",conditionMessage(e), "\n")})
}
proc.time() - ptm
validgeometry$ELVmean_WS<-unlist(validgeometry$ELVmean_WS)
media<-as.data.frame(validgeometry$ELVmean_WS)
colnames(media)<-"ELVmean_WS"
return(media)
}
ELVmin_WS<-function(polygon2process){
validgeometry<-st_make_valid(polygon2process)
validgeometry$ELVmean_WS<-NA
ptm <- proc.time()
for (i in 1:10){
tryCatch({ #if an error is found then it is printed, but the loop does not break and continues with the next iteration
objecto<-validgeometry[i,] # Take the first feature
elmean<-ee_extract(USGS_NED, objecto, fun = ee$Reducer$min(), scale=30)%>% as_tibble()
validgeometry[[4]][i]<-elmean
},error=function(e){cat("ERROR :",conditionMessage(e), "\n")})
}
proc.time() - ptm
validgeometry$ELVmean_WS<-unlist(validgeometry$ELVmean_WS)
media<-as.data.frame(validgeometry$ELVmean_WS)
colnames(media)<-"ELVmin_WS"
return(media)
}
KFACT<-function(polygon2process){
validgeometry<-st_make_valid(polygon2process)
validgeometry$KFACT<-exact_extract(KFACT.ras,validgeometry,'mean')
media<-as.data.frame(validgeometry$KFACT)
colnames(media)<-"KFACT"
return(media)
}
AREMtest<-AREM_model(putin)
View(AREMtest)
PMIN_WS.ras<-raster("/Users/alexhernandez/Desktop/BUG_BLM/ZonalTest/GIS_Stats01/Climate/Data/pmin_usgs/w001001.adf")
RH_WS.ras<-raster("/Users/alexhernandez/Desktop/BUG_BLM/ZonalTest/GIS_Stats01/Climate/Data/rhmean_usgs/w001001.adf")
TMAX_WS.ras<-raster("/Users/alexhernandez/Desktop/BUG_BLM/ZonalTest/GIS_Stats01/Climate/Data/tmax_usgs/w001001.adf")
TMEAN_WS.ras<-raster("/Users/alexhernandez/Desktop/BUG_BLM/ZonalTest/GIS_Stats01/Climate/Data/tmean_usgs/w001001.adf")
PMIN_WS<-function(polygon2process){
validgeometry<-st_make_valid(polygon2process)
validgeometry$PMIN_WS<-exact_extract(KFACT.ras,validgeometry,'mean')
media<-as.data.frame(validgeometry$PMIN_WS)
colnames(media)<-"PMIN_WS"
return(media)
}
RH_WS<-function(polygon2process){
validgeometry<-st_make_valid(polygon2process)
validgeometry$RH_WS<-exact_extract(RH_WS.ras,validgeometry,'mean')
media<-as.data.frame(validgeometry$RH_WS)
colnames(media)<-"RH_WS"
return(media)
}
TMAX_WS<-function(polygon2process){
validgeometry<-st_make_valid(polygon2process)
validgeometry$TMAX_WS<-exact_extract(TMAX_WS.ras,validgeometry,'mean')
media<-as.data.frame(validgeometry$TMAX_WS)
colnames(media)<-"TMAX_WS"
return(media)
}
TMEAN_WS<-function(polygon2process){
validgeometry<-st_make_valid(polygon2process)
validgeometry$TMEAN_WS<-exact_extract(TMEAN_WS.ras,validgeometry,'mean')
media<-as.data.frame(validgeometry$TMEAN_WS)
colnames(media)<-"TMEAN_WS"
return(media)
}
##### Model functions
AREM_model<-function(polygon2process){
inputpolys<-polygon2process
ELVmean_WSS<-ELVmean_WS(inputpolys)
ELVmin_WSS<-ELVmin_WS(inputpolys)
KFACTS<-KFACT(inputpolys)
PMIN_WSS<-PMIN_WS(inputpolys)
RH_WSS<-RH_WS(inputpolys)
TMAX_WSS<-TMAX_WS(inputpolys)
TMEAN_WSS<-TMEAN_WS(inputpolys)
df2render<-cbind(ELVmean_WSS,ELVmin_WSS,KFACTS,PMIN_WSS,RH_WSS,TMAX_WSS,TMEAN_WSS)
return(df2render)
}
AREMtest<-AREM_model(putin)
View(AREMtest)
ELVmean_WS<-function(polygon2process){
validgeometry<-st_make_valid(polygon2process)
validgeometry$ELVmean_WS<-NA
ptm <- proc.time()
for (i in 1:nrow(validgeometry)){
tryCatch({ #if an error is found then it is printed, but the loop does not break and continues with the next iteration
objecto<-validgeometry[i,] # Take the first feature
elmean<-ee_extract(USGS_NED, objecto, fun = ee$Reducer$mean(), scale=30)%>% as_tibble()
validgeometry[[4]][i]<-elmean
},error=function(e){cat("ERROR :",conditionMessage(e), "\n")})
}
proc.time() - ptm
validgeometry$ELVmean_WS<-unlist(validgeometry$ELVmean_WS)
media<-as.data.frame(validgeometry$ELVmean_WS)
colnames(media)<-"ELVmean_WS"
return(media)
}
ELVmin_WS<-function(polygon2process){
validgeometry<-st_make_valid(polygon2process)
validgeometry$ELVmean_WS<-NA
ptm <- proc.time()
for (i in 1:nrow(validgeometry)){
tryCatch({ #if an error is found then it is printed, but the loop does not break and continues with the next iteration
objecto<-validgeometry[i,] # Take the first feature
elmean<-ee_extract(USGS_NED, objecto, fun = ee$Reducer$min(), scale=30)%>% as_tibble()
validgeometry[[4]][i]<-elmean
},error=function(e){cat("ERROR :",conditionMessage(e), "\n")})
}
proc.time() - ptm
validgeometry$ELVmean_WS<-unlist(validgeometry$ELVmean_WS)
media<-as.data.frame(validgeometry$ELVmean_WS)
colnames(media)<-"ELVmin_WS"
return(media)
}
##### Model functions
AREM_model<-function(polygon2process){
inputpolys<-polygon2process
ELVmean_WSS<-ELVmean_WS(inputpolys)
ELVmin_WSS<-ELVmin_WS(inputpolys)
KFACTS<-KFACT(inputpolys)
PMIN_WSS<-PMIN_WS(inputpolys)
RH_WSS<-RH_WS(inputpolys)
TMAX_WSS<-TMAX_WS(inputpolys)
TMEAN_WSS<-TMEAN_WS(inputpolys)
df2render<-cbind(ELVmean_WSS,ELVmin_WSS,KFACTS,PMIN_WSS,RH_WSS,TMAX_WSS,TMEAN_WSS)
return(df2render)
}
ptm <- proc.time()
AREMtest<-AREM_model(putin)
proc.time() - ptm
View(arem.kmz)
View(AREMtest)
